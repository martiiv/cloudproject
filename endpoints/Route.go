package endpoints

import (
	"cloudproject/extra"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
	"time"
)

func Route(w http.ResponseWriter, request *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	StartAddress := strings.Split(request.URL.Path, `/`)[2] //Getting the address/name of the place we want to look for chargers
	EndAddress := strings.Split(request.URL.Path, `/`)[3]   //Getting the address/name of the place we want to look for chargers

	startLat, startLong, err := extra.GetLocation(StartAddress)
	if err != nil {
	}

	EndLat, endLong, err := extra.GetLocation(EndAddress)
	if err != nil {
	}

	coordinates := startLat + "%2C" + startLong + "%3A" + EndLat + "%2C" + endLong

	fmt.Println(coordinates)

	resp, err := http.Get("https://api.tomtom.com/routing/1/calculateRoute/" + coordinates + "/json?instructionsType=coded&traffic=false&avoid=unpavedRoads&travelMode=car&key=" + extra.TomtomKey)
	if err != nil {
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
	}

	var roads extra.AutoGenerated3
	if err = json.Unmarshal(body, &roads); err != nil {
		log.Fatal(err.Error())
	}

	var maneuver string
	var junctionType string
	var RoadNumber string
	var Street string

	var total []extra.Route

	drivingDuration := roads.Routes[0].Summary.TravelTimeInSeconds

	timeDuration := time.Duration(drivingDuration)

	time.Parse()

	drivingDurationHour := drivingDuration / 3600
	drivingLength := roads.Routes[0].Summary.LengthInMeters

	infromation := extra.RoadInformation{Hours: drivingDurationHour, Minutes: drivingDurationMinutes, Length: drivingLength}

	output1, err := json.Marshal(infromation) //Marshalling the array to JSON
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	fmt.Printf(string(output1), http.StatusBadRequest)

	for i := 0; i < len(roads.Routes[0].Guidance.Instructions); i++ {
		maneuver = roads.Routes[0].Guidance.Instructions[i].Maneuver
		junctionType = roads.Routes[0].Guidance.Instructions[i].JunctionType
		if roads.Routes[0].Guidance.Instructions[i].RoadNumbers != nil {
			RoadNumber = roads.Routes[0].Guidance.Instructions[i].RoadNumbers[0]
		}
		Street = roads.Routes[0].Guidance.Instructions[i].Street

		route := extra.Route{Street: Street, RoadNumber: RoadNumber, Maneuver: maneuver, JunctionType: junctionType}
		total = append(total, route)
	}

	output, err := json.Marshal(total) //Marshalling the array to JSON
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	fmt.Fprintf(w, "%v", string(output)) //Outputs the chargers

}
