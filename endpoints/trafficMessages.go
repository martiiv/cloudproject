package endpoints

import (
	"cloudproject/extra"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

func Messages(w http.ResponseWriter, request *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	StartAddress := strings.Split(request.URL.Path, `/`)[2] //Getting the address/name of the place we want to look for chargers
	EndAddress := strings.Split(request.URL.Path, `/`)[3]   //Getting the address/name of the place we want to look for chargers

	bbox, err := getBBox(StartAddress, EndAddress)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}

	var box string
	for j := 0; j < len(bbox); j++ {
		coordinate := strconv.FormatFloat(bbox[j], 'f', 6, 64)
		box += coordinate + ","
	}
	box = strings.TrimRight(box, ",")

	response, err := http.Get("https://api.tomtom.com/traffic/services/5/incidentDetails?bbox=" + url.QueryEscape(box) +
		"&fields=%7Bincidents%7Btype%2Cgeometry%7Btype%2Ccoordinates%7D%2Cproperties%7Bid%2CiconCategory%2CmagnitudeOfDelay%2Cevents%7Bdescription%2Ccode%7D%2CstartTime%2Cend" +
		"Time%2Cfrom%2Cto%2Clength%2Cdelay%2CroadNumbers%2Caci%7BprobabilityOfOccurrence%2CnumberOfReports%2ClastReportTime%7D%7D%7D%7D&key=gOorFpmbH5GPKh6uGqcfJN76oKFKfswA")

	body, err := ioutil.ReadAll(response.Body)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}

	var messages extra.Incidents
	if err = json.Unmarshal(body, &messages); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}

	var all []extra.OutIncident
	time := time.Now().Add(-60 * time.Minute)

	for i := 0; i < len(messages.Incidents); i++ {

		if messages.Incidents[i].Properties.Events[0].Code != 115 && !messages.Incidents[i].Properties.EndTime.Before(time) {
			startTime := messages.Incidents[i].Properties.StartTime
			endTime := messages.Incidents[i].Properties.EndTime
			FromAddress := messages.Incidents[i].Properties.From
			toAddress := messages.Incidents[i].Properties.To
			Event := messages.Incidents[i].Properties.Events[0].Description

			if strings.ContainsAny(FromAddress, "Ã¸") {
				FromAddress = strings.ReplaceAll(FromAddress, "Ã¸", "ø")
			} else if strings.ContainsAny(toAddress, "Ã¸") {
				toAddress = strings.ReplaceAll(toAddress, "Ã¸", "ø")
			}

			incidents := extra.OutIncident{From: FromAddress, To: toAddress, Start: startTime, End: endTime, Event: Event}

			all = append(all, incidents)
		}

	}

	output, err := json.Marshal(all) //Marshalling the array to JSON
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	fmt.Fprintf(w, "%v", string(output)) //Outputs the chargers

}

func getBBox(StartAddress string, endAddress string) ([]float64, error) {

	var arr []float64

	startLat, startLong, err := extra.GetLocation(StartAddress)
	if err != nil {
		return arr, err
	}

	EndLat, endLong, err := extra.GetLocation(endAddress)
	if err != nil {
		return arr, err
	}

	resp, err := http.Get("https://api.openrouteservice.org/v2/directions/driving-car?api_key=5b3ce3597851110001cf6248917ff3438230403186605e2ad94a71b6&start=" + startLong + "," + startLat + "&end=" + endLong + "," + EndLat)
	if err != nil {
		return arr, err
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return arr, err
	}

	var bbox extra.AutoGenerated
	if err = json.Unmarshal(body, &bbox); err != nil {
		return arr, err

	}

	arr = bbox.Bbox

	return arr, err

}
